apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: codefresh-demo-alb
spec:
  providerConfigRef:
    name: aws-irsa
  forProvider:
    source: Inline
    module: |
      resource "aws_security_group" "main" {
        name        = var.tag
        description = "Allow inbound web traffic and all outbound traffic"
        vpc_id      = var.aws_vpc_id

        tags = {
          Name = var.tag
        }
      }

      resource "aws_vpc_security_group_ingress_rule" "allow_https_ipv4" {
        security_group_id = aws_security_group.main.id
        cidr_ipv4         = "0.0.0.0/0"
        from_port         = 443
        ip_protocol       = "tcp"
        to_port           = 443
      }

      resource "aws_vpc_security_group_ingress_rule" "allow_http_ipv4" {
        security_group_id = aws_security_group.main.id
        cidr_ipv4         = "0.0.0.0/0"
        from_port         = 80
        ip_protocol       = "tcp"
        to_port           = 80
      }

      resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
        security_group_id = aws_security_group.main.id
        cidr_ipv4         = "0.0.0.0/0"
        ip_protocol       = "-1" # semantically equivalent to all ports
      }

      resource "aws_lb" "main" {
        name               = var.tag
        internal           = false
        load_balancer_type = "application"
        security_groups    = [aws_security_group.main.id]
        subnets            = [var.aws_subnet_main_1_id, var.aws_subnet_main_2_id]

        enable_deletion_protection = true

        tags = {
          Environment = var.tag
        }
      }

      resource "aws_lb_listener" "main_http" {
        load_balancer_arn = aws_lb.main.arn
        port              = "80"
        protocol          = "HTTP"

        default_action {
          type             = "forward"
          target_group_arn = var.target_group_arn
        }
      }

      variable "tag" {
        description = "Amazon Tag"
        type        = string
      }

      variable "aws_subnet_main_1_id" {
        description = "AWS Subnet 1 ID"
        type        = string
      }

      variable "aws_subnet_main_2_id" {
        description = "AWS Subnet 2 ID"
        type        = string
      }

      variable "aws_vpc_id" {
        description = "AWS VPC ID"
        type        = string
      }

      variable "target_group_arn" {
        description = "Target Group ARN"
        type        = string
      }

      output "aws_alb_id" {
        value = aws_lb.main.arn
        sensitive = false
      }

      output "aws_alb_dns_name" {
        value = aws_lb.main.dns_name
        sensitive = false
      }
    vars:
      - key: tag
        value: "codefresh-demo-environment"
      - key: aws_subnet_main_1_id
        value: "subnet-024f5da41416f15d7"
      - key: aws_subnet_main_2_id
        value: "subnet-01a1ec73642b8f057"
      - key: aws_vpc_id
        value: "vpc-0aeaf09a787b64582"
      - key: target_group_arn
        value: "\"arn:aws:elasticloadbalancing:us-east-1:336151728602:targetgroup/codefresh-demo-environment-eks-1/32380eb8b7a4fafe\""
