apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: codefresh-demo-iam
spec:
  providerConfigRef:
    name: aws-irsa
  forProvider:
    source: Inline
    module: |
      resource "aws_iam_role" "main" {
        name = "${var.iam_role_name}"

        assume_role_policy = jsonencode({
          Statement = [{
            Action = "sts:AssumeRole"
            Effect = "Allow"
            Principal = {
              Service = [
                "ec2.amazonaws.com",
                "eks.amazonaws.com"
              ]
            }
          }]
          Version = "2012-10-17"
        })
      }

      resource "aws_iam_role_policy_attachment" "main-AmazonEKSWorkerNodePolicy" {
        policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        role       = aws_iam_role.main.name
      }

      resource "aws_iam_role_policy_attachment" "main-AmazonEKS_CNI_Policy" {
        policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        role       = aws_iam_role.main.name
      }

      resource "aws_iam_role_policy_attachment" "main-AmazonEC2ContainerRegistryReadOnly" {
        policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        role       = aws_iam_role.main.name
      }

      resource "aws_iam_role_policy_attachment" "main-AmazonEBSCSIDriverPolicy" {
        policy_arn = "arn:aws:iam::aws:policy/AmazonEBSCSIDriverPolicy"
        role       = aws_iam_role.main.name
      }

      resource "aws_iam_role_policy_attachment" "main-AmazonRoute53FullAccess" {
        policy_arn = "arn:aws:iam::aws:policy/AmazonRoute53FullAccess"
        role       = aws_iam_role.main.name
      }

      variable "iam_role_name" {
        description = "IAM role name"
        type        = string
      }

      output "aws_iam_role_id" {
        value = aws_iam_role.main.arn
        sensitive = false
      }
    vars:
      - key: iam_role_name
        value: "codefresh-demo-environment"
